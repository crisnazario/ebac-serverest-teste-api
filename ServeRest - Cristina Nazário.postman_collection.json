{
	"info": {
		"_postman_id": "fc50fdd3-5586-44eb-9cd0-b7e55ec5cf2b",
		"name": "ServeRest",
		"description": "## **Informações sobre o exercício**\n\n**Aluna:** Cristina Nazário\n\n**Módulo 13:** Estratégias de testes de API\n\nOs testes realizados possuem 19 casos de testes sobre os endpoints referentes ao usuário.\n\n## **Informações sobre a API do ServeRest**\n\n> **O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.** \n  \n> **Não deixe de seguir o** [autor do projeto](https://github.com/PauloGoncalvesBH) **e deixar um star no repositório:** [github.com/ServeRest/ServeRest](https://github.com/ServeRest/ServeRest) \n  \n> Essa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest). \n  \n> Está utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections. \n  \n> Vai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'. \n  \n> Muito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG** [Todas as letras ](https://todasasletras.org/) até o momento. \n  \n> O ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev). \n  \n> Precisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto: \n  \n> Contact Support:  \nName: Paulo Gonçalves",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11061409"
	},
	"item": [
		{
			"name": "Usuários",
			"item": [
				{
					"name": "Cadastrar usuário com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' e '_id' devem retornar e ser strings\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\")\r",
									"    pm.expect(jsonResposta, \"Propriedade '_id' deve existir no body de resposta e deve ser uma string\").to.have.property(\"_id\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar 'Cadastro realizado com sucesso'\", function(){\r",
									"    pm.expect(pm.response.json().message, \"A mensagem esperada é: 'Cadastro realizado com sucesso'\").to.eql(\"Cadastro realizado com sucesso\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário que já possui cadastro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' deve retornar e ser string\", function (){\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar 'Este email já está sendo usado'\", function(){\r",
									"    pm.expect(pm.response.json().message, \"A mensagem esperada é: 'Este email já está sendo usado'\").to.eql(\"Este email já está sendo usado\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"const flagAdm = pm.variables.replaceIn(\"{{administrador}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"pm.variables.set(\"flagAdm\", flagAdm);\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": flagAdm\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro) {\r",
									"    pm.expect(erro, \"Deveria ter cadastrado o produto.\").is.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{nome}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"administrador\": \"{{flagAdm}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"nome\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'nome' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'nome' deve existir no body de resposta e deve ser uma string\").to.have.property(\"nome\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'nome não pode ficar em branco'\", function(){\r",
									"    pm.expect(pm.response.json().nome, \"A mensagem esperada é: 'nome não pode ficar em branco'\").to.eql(\"nome não pode ficar em branco\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"email\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'email' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'email' deve existir no body de resposta e deve ser uma string\").to.have.property(\"email\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'email não pode ficar em branco'\", function(){\r",
									"    pm.expect(pm.response.json().email, \"A mensagem esperada é: 'email não pode ficar em branco'\").to.eql(\"email não pode ficar em branco\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar mensagem de alerta sobre e-mail inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'email' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'email' deve existir no body de resposta e deve ser uma string\").to.have.property(\"email\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'email deve ser um email válido'\", function(){\r",
									"    pm.expect(pm.response.json().email, \"A mensagem esperada é: 'email deve ser um email válido'\").to.eql(\"email deve ser um email válido\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomLoremWord}}@email.c\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"password\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'password' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'password' deve existir no body de resposta e deve ser uma string\").to.have.property(\"password\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'password não pode ficar em branco'\", function(){\r",
									"    pm.expect(pm.response.json().password, \"A mensagem esperada é: 'password não pode ficar em branco'\").to.eql(\"password não pode ficar em branco\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"administrador\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'administrador' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'administrador' deve existir no body de resposta e deve ser uma string\").to.have.property(\"administrador\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem: administrador deve ser 'true' ou 'false'\", function(){\r",
									"    pm.expect(pm.response.json().administrador, \"A mensagem esperada é: 'administrador deve ser 'true' ou 'false''\").to.eql(\"administrador deve ser 'true' ou 'false'\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Buscar usuário por ID inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"idInexistente\", pm.variables.replaceIn(\"{{$randomWord}}\")+pm.variables.replaceIn(\"{{$randomInt}}\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function () {\r",
									"    var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' deve retornar e ser string\", function() {\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'Usuário não encontrado'\", function () {\r",
									"    pm.expect(pm.response.json().message, \"Mensagem retornada deve ser: 'Usuário não encontrado'\").to.eql(\"Usuário não encontrado\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{idInexistente}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "Buscar usuário por ID com sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function () {\r",
									"    var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'nome' deve retornar e ser string\", function() {\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'nome' deve existir no body de resposta e deve ser uma string\").to.have.property(\"nome\").and.to.be.a(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"'email' deve retornar e ser string\", function() {\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'email' deve existir no body de resposta e deve ser uma string\").to.have.property(\"email\").and.to.be.a(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"'password' deve retornar e ser string\", function() {\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'password' deve existir no body de resposta e deve ser uma string\").to.have.property(\"password\").and.to.be.a(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"'administrador' deve retornar e ser string\", function() {\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'administrador' deve existir no body de resposta e deve ser uma string\").to.have.property(\"administrador\").and.to.be.a(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"'_id' deve retornar e ser string\", function () {\r",
									"    pm.expect(pm.response.json(), \"Propriedade '_id' deve existir no body de resposta e deve ser uma string\").to.have.property(\"_id\").and.to.be.a(\"string\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{idUsuario}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "Editar usuário com sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' e '_id' devem retornar e ser strings\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\")   \r",
									"})\r",
									"\r",
									"pm.test(\"Validar 'Registro alterado com sucesso'\", function(){\r",
									"    pm.expect(pm.response.json().message, \"A mensagem esperada é: 'Registro alterado com sucesso'\").to.eql(\"Registro alterado com sucesso\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nome\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "0uxuPY0cbmQhpEz1"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
					},
					"response": [
						{
							"name": "Alterado com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
						},
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Alterar usuário usando um e-mail já cadastrado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"const criarUsuarioDefault = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuarioDefault, function(erro,resposta){\r",
									"    console.info(pm.info.requestName +\": \"+\"Primeiro usuário criado\");\r",
									"})\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
									"            \"email\": pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
									"            \"password\": pm.variables.replaceIn(\"{{$randomPassword}}\"),\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' deve retornar e ser string\", function (){\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar 'Este email já está sendo usado'\", function(){\r",
									"    pm.expect(pm.response.json().message, \"A mensagem esperada é: 'Este email já está sendo usado'\").to.eql(\"Este email já está sendo usado\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nome\": \"{{$randomFullName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
					},
					"response": [
						{
							"name": "Alterado com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
						},
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"nome\" ao alterar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'nome' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'nome' deve existir no body de resposta e deve ser uma string\").to.have.property(\"nome\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'nome não pode ficar em branco'\", function(){\r",
									"    pm.expect(pm.response.json().nome, \"A mensagem esperada é: 'nome não pode ficar em branco'\").to.eql(\"nome não pode ficar em branco\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"email\" ao alterar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'email' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'email' deve existir no body de resposta e deve ser uma string\").to.have.property(\"email\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'email não pode ficar em branco'\", function(){\r",
									"    pm.expect(pm.response.json().email, \"A mensagem esperada é: 'email não pode ficar em branco'\").to.eql(\"email não pode ficar em branco\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar mensagem de alerta sobre e-mail inválido ao alterar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'email' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'email' deve existir no body de resposta e deve ser uma string\").to.have.property(\"email\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'email deve ser um email válido'\", function(){\r",
									"    pm.expect(pm.response.json().email, \"A mensagem esperada é: 'email deve ser um email válido'\").to.eql(\"email deve ser um email válido\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomLoremWord}}@email.c\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"password\" ao alterar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'password' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'password' deve existir no body de resposta e deve ser uma string\").to.have.property(\"password\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'password não pode ficar em branco'\", function(){\r",
									"    pm.expect(pm.response.json().password, \"A mensagem esperada é: 'password não pode ficar em branco'\").to.eql(\"password não pode ficar em branco\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"\",\n  \"administrador\": \"{{administrador}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Validar obrigatoriedade da propriedade \"administrador\" ao alterar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'administrador' deve retornar e ser string\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'administrador' deve existir no body de resposta e deve ser uma string\").to.have.property(\"administrador\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem: administrador deve ser 'true' ou 'false'\", function(){\r",
									"    pm.expect(pm.response.json().administrador, \"A mensagem esperada é: 'administrador deve ser 'true' ou 'false''\").to.eql(\"administrador deve ser 'true' ou 'false'\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Excluir usuário com sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const nome = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"\r",
									"pm.variables.set(\"nome\", nome);\r",
									"pm.variables.set(\"email\", email);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									"const criarUsuario = {\r",
									"    url: pm.collectionVariables.get(\"baseUrl\") + \"/usuarios\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": pm.variables.get(\"administrador\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(criarUsuario, function(erro,resposta) {  \r",
									"    pm.variables.set(\"idUsuario\", resposta.json()._id)    \r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function (){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function() {\r",
									"     var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' devem retornar e ser strings\", function (){\r",
									"    var jsonResposta = pm.response.json()\r",
									"\r",
									"    pm.expect(jsonResposta, \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.test(\"Validar 'Registro excluído com sucesso'\", function(){\r",
									"    pm.expect(pm.response.json().message, \"A mensagem esperada é: 'Registro excluído com sucesso'\").to.eql(\"Registro excluído com sucesso\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{idUsuario}}"
								}
							]
						},
						"description": "Não é permitido excluir usuário com carrinho."
					},
					"response": [
						{
							"name": "Registro excluído com sucesso | Nenhum registro excluído",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
						},
						{
							"name": "Usuário com carrinho cadastrado",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
						}
					]
				},
				{
					"name": "Excluir usuário por ID inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"idInexistente\", pm.variables.replaceIn(\"{{$randomWord}}\")+pm.variables.replaceIn(\"{{$randomInt}}\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type é application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 20ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta deve ser um objeto\", function () {\r",
									"    var jsonResposta = pm.response.json()\r",
									"    pm.expect(jsonResposta, \"O body de resposta deve ser um objeto\").to.be.an(\"object\")\r",
									"})\r",
									"\r",
									"pm.test(\"'message' deve retornar e ser string\", function() {\r",
									"    pm.expect(pm.response.json(), \"Propriedade 'message' deve existir no body de resposta e deve ser uma string\").to.have.property(\"message\").and.to.be.a(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem 'Nenhum registro excluído'\", function () {\r",
									"    pm.expect(pm.response.json().message, \"Mensagem retornada deve ser: 'Nenhum registro excluído'\").to.eql(\"Nenhum registro excluído\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{idInexistente}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "Listar usuários cadastrados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar quantidade de objetos do array de usuários\", function() {\r",
									"    var resposta = pm.response.json();\r",
									"\r",
									"    pm.expect(resposta.quantidade).to.eql(resposta.usuarios.length)\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta deve ser menor que 50ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Usuários deve retornar objetos\", function (){\r",
									"    pm.expect(pm.response.json().usuarios).is.not.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"Nomes devem estar preenchidos\", function() {\r",
									"    var arrayUsuario = pm.response.json().usuarios   \r",
									"    \r",
									"    pm.expect(arrayUsuario.filter((arrayUsuario) => !arrayUsuario.nome), \"A propriedade 'nome' não pode retornar vazia ou nula\").to.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"Emails devem estar preenchidos\", function() {\r",
									"    var arrayUsuario = pm.response.json().usuarios    \r",
									"   \r",
									"    pm.expect(arrayUsuario.filter((arrayUsuario) => !arrayUsuario.email), \"A propriedade 'email' não pode retornar vazia ou nula\").to.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"Passwords devem estar preenchidos\", function() {\r",
									"    var arrayUsuario = pm.response.json().usuarios    \r",
									"\r",
									"    pm.expect(arrayUsuario.filter((arrayUsuario) => !arrayUsuario.password), \"A propriedade 'password' não pode retornar vazia ou nula\").to.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"Administrador devem estar preenchidos\", function() {\r",
									"    var arrayUsuario = pm.response.json().usuarios    \r",
									"\r",
									"    pm.expect(arrayUsuario.filter((arrayUsuario) => !arrayUsuario.administrador), \"A propriedade 'administrador' não pode retornar vazia ou nula\").to.be.empty\r",
									"})\r",
									"\r",
									"pm.test(\"_id devem estar preenchidos\", function() {\r",
									"    var arrayUsuario = pm.response.json().usuarios    \r",
									"\r",
									"    pm.expect(arrayUsuario.filter((arrayUsuario) => !arrayUsuario._id), \"A propriedade '_id' não pode retornar vazia ou nula\").to.be.empty\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-mock-response-id",
								"value": "11061409-96b260dd-0bc9-4e69-8674-2d6908913217",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "_id",
									"value": "velit consectetur",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "Marinal",
									"disabled": true
								},
								{
									"key": "email",
									"value": "velit consectetur",
									"disabled": true
								},
								{
									"key": "password",
									"value": "velit consectetur",
									"disabled": true
								},
								{
									"key": "administrador",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista de usuários",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=velit consectetur&nome=velit consectetur&email=velit consectetur&password=velit consectetur&administrador=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "velit consectetur"
										},
										{
											"key": "nome",
											"value": "velit consectetur"
										},
										{
											"key": "email",
											"value": "velit consectetur"
										},
										{
											"key": "password",
											"value": "velit consectetur"
										},
										{
											"key": "administrador",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
						}
					]
				}
			],
			"description": "Gerencie os usuários, consulte dados para login e cadastre administrador",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let administrador = [\"true\", \"false\"];",
							"pm.variables.set(\"administrador\", administrador[_.random(administrador.length -1)]);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		}
	]
}